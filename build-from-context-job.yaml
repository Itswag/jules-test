kind: Job
apiVersion: batch/v1
metadata:
  name: build-from-context-job
  namespace: default
spec:
  parallelism: 1
  completions: 1
  activeDeadlineSeconds: 3600
  backoffLimit: 1
  template:
    spec:
      containers:
        - name: image-builder
          image: gcr.io/kaniko-project/executor:latest
          env:
            - name: INTERMEDIATE_REGISTRY_URL
              value: "docker-registry.default.svc.cluster.local:5000"
            - name: BUILD_CONTEXT_URL
              value: "http://example.com/my-app-context.tar.gz"
            - name: DOCKERFILE_PATH
              value: "Dockerfile" 
            - name: BUILD_IMAGE_NAME
              value: "my-app-built"
            - name: BUILD_IMAGE_TAG
              value: "latest"
          command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail

              ensure_workspace() {
                echo "Ensuring workspace /workspace/context exists..."
                mkdir -p /workspace/context
              }

              download_and_extract_context() {
                echo "Downloading build context from $BUILD_CONTEXT_URL..."
                wget --no-check-certificate -O /workspace/context.tar.gz "$BUILD_CONTEXT_URL"
                
                echo "Extracting build context to /workspace/context/..."
                tar -xzf /workspace/context.tar.gz -C /workspace/context/
              }

              build_with_kaniko() {
                echo "Building Docker image with Kaniko..."
                /kaniko/executor \
                  --context dir:///workspace/context \
                  --dockerfile /workspace/context/${DOCKERFILE_PATH:-Dockerfile} \
                  --destination ${INTERMEDIATE_REGISTRY_URL}/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG} \
                  --skip-tls-verify-registry=${INTERMEDIATE_REGISTRY_URL}
                echo "Kaniko build finished."
              }

              # Main script logic for build-from-context
              echo "Proceeding with image build..."
              ensure_workspace
              download_and_extract_context
              build_with_kaniko
              echo "Image built and pushed to intermediate registry ${INTERMEDIATE_REGISTRY_URL}/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}"
          imagePullPolicy: IfNotPresent

        - name: skopeo-promoter # Renamed from skopeo-pusher
          image: quay.io/skopeo/skopeo:latest 
          env:
            - name: INTERMEDIATE_REGISTRY_URL
              value: "docker-registry.default.svc.cluster.local:5000"
            - name: BUILD_IMAGE_NAME 
              value: "my-app-built"
            - name: BUILD_IMAGE_TAG 
              value: "latest"
            - name: HARBOR_REGISTRY
              value: "dockerhub.kubekey.local"
            - name: HARBOR_PROJECT
              value: "user/cve"
            - name: HARBOR_IMAGE_NAME
              value: "my-app-final" 
            - name: HARBOR_IMAGE_TAG
              value: "v1.2.3"
            - name: HARBOR_USERNAME
              valueFrom:
                secretKeyRef:
                  name: harbor-credentials
                  key: username
            - name: HARBOR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: harbor-credentials
                  key: password
          command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail

              promote_image() {
                echo "Promoting image from intermediate registry to Harbor..."
                skopeo copy \
                  --src-tls-verify=false \
                  --dest-tls-verify=false \
                  --dest-creds="${HARBOR_USERNAME}:${HARBOR_PASSWORD}" \
                  "docker://${INTERMEDIATE_REGISTRY_URL}/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}" \
                  "docker://${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}"
              }

              # Main script logic for build-from-context (skopeo-promoter)
              promote_image
              echo "Image promoted to Harbor successfully."
          imagePullPolicy: IfNotPresent
          
      restartPolicy: Never
      hostNetwork: true
      # Consider adding imagePullSecrets if images are from private registries
      # imagePullSecrets:
      #   - name: my-registry-secret
