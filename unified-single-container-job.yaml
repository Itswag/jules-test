apiVersion: batch/v1
kind: Job
metadata:
  name: unified-single-container-job
  namespace: default
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
        - name: pod-info-volume
          emptyDir: {}
      initContainers:
        - name: init-determine-action
          image: alpine/git # Small image with sh
          volumeMounts:
            - name: pod-info-volume
              mountPath: /pod-info
          env:
            - name: JOB_TYPE
              value: "build_and_push" # Example value, can be "build_and_push" or "push_tar"
          command:
            - /bin/sh
            - -c
            - |
              #!/bin/sh
              set -euo pipefail
              POD_INFO_DIR="/pod-info"
              ACTION_TYPE_FILE="${POD_INFO_DIR}/action_type"
              log_info() { echo "[INFO-INIT] $(date '+%Y-%m-%d %H:%M:%S') - $1"; }
              log_error() { echo "[ERROR-INIT] $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2; }
              if ! mkdir -p "$POD_INFO_DIR"; then log_error "Failed to create $POD_INFO_DIR."; exit 1; fi
              if [ -z "${JOB_TYPE}" ]; then log_error "JOB_TYPE env var not set."; exit 1; fi
              log_info "JOB_TYPE: ${JOB_TYPE}"
              ACTION_TO_WRITE=""
              case "${JOB_TYPE}" in
                "build_and_push") ACTION_TO_WRITE="build";;
                "push_tar") ACTION_TO_WRITE="push_tar";;
                *) log_error "Invalid JOB_TYPE: ${JOB_TYPE}"; exit 1;;
              esac
              log_info "Setting action type to '${ACTION_TO_WRITE}' in $ACTION_TYPE_FILE"
              echo "${ACTION_TO_WRITE}" > "$ACTION_TYPE_FILE"
              if [ ! -f "$ACTION_TYPE_FILE" ] || [ "$(cat $ACTION_TYPE_FILE)" != "${ACTION_TO_WRITE}" ]; then
                  log_error "Failed to write action to $ACTION_TYPE_FILE."
                  exit 1
              fi
              log_info "Successfully wrote action to $ACTION_TYPE_FILE."
              exit 0
      containers:
        - name: main-task-executor
          image: your-repo/kaniko-skopeo-tools:latest # Placeholder - requires Kaniko, Skopeo, wget, tar, curl
          volumeMounts:
            - name: pod-info-volume
              mountPath: /pod-info
          env:
            - name: BUILD_CONTEXT_URL
              value: "http://example.com/context.tar.gz"
            - name: DOCKERFILE_PATH
              value: "Dockerfile" 
            - name: INTERMEDIATE_REGISTRY_URL
              value: "registry.internal:5000"
            - name: BUILD_IMAGE_NAME
              value: "temp-image"
            - name: BUILD_IMAGE_TAG
              value: "build-123"
            - name: IMAGE_TAR_URL
              value: "http://example.com/image.tar"
            - name: HARBOR_REGISTRY
              value: "harbor.example.com"
            - name: HARBOR_PROJECT
              value: "library"
            - name: HARBOR_IMAGE_NAME
              value: "final-image"
            - name: HARBOR_IMAGE_TAG
              value: "latest"
            - name: HARBOR_USERNAME
              valueFrom:
                secretKeyRef:
                  name: harbor-credentials
                  key: username
            - name: HARBOR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: harbor-credentials
                  key: password
          command:
            - /bin/sh
            - -c
            - |
              #!/bin/sh
              set -euo pipefail
              ACTION_TYPE_FILE="/pod-info/action_type"; ACTION="";
              log_info() { echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') - $1"; }; log_error() { echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2; };
              ensure_env_vars_set() { for var_name in "$@"; do if [ -z "${!var_name}" ]; then log_error "ENV VAR ${var_name} not set."; exit 1; fi; done; };
              download_and_extract_build_context() { log_info "Downloading context from $BUILD_CONTEXT_URL."; ensure_env_vars_set BUILD_CONTEXT_URL; mkdir -p /workspace/context; if ! wget --no-check-certificate -O /workspace/context.tar.gz "$BUILD_CONTEXT_URL"; then log_error "Failed download context."; exit 1; fi; if ! tar -xzf /workspace/context.tar.gz -C /workspace/context/; then log_error "Failed extract context."; exit 1; fi; log_info "Context downloaded/extracted."; };
              run_kaniko_build() { log_info "Starting Kaniko build..."; ensure_env_vars_set INTERMEDIATE_REGISTRY_URL BUILD_IMAGE_NAME BUILD_IMAGE_TAG; local df_path="/workspace/context/${DOCKERFILE_PATH:-Dockerfile}"; /kaniko/executor --context dir:///workspace/context --dockerfile "${df_path}" --destination "${INTERMEDIATE_REGISTRY_URL}/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}" --skip-tls-verify-registry="${INTERMEDIATE_REGISTRY_URL}"; log_info "Kaniko build done: ${INTERMEDIATE_REGISTRY_URL}/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}"; };
              promote_to_harbor() { log_info "Promoting to Harbor..."; ensure_env_vars_set INTERMEDIATE_REGISTRY_URL BUILD_IMAGE_NAME BUILD_IMAGE_TAG HARBOR_REGISTRY HARBOR_PROJECT HARBOR_IMAGE_NAME HARBOR_IMAGE_TAG HARBOR_USERNAME HARBOR_PASSWORD; skopeo copy --src-tls-verify=false --dest-tls-verify=false --dest-creds="${HARBOR_USERNAME}:${HARBOR_PASSWORD}" "docker://${INTERMEDIATE_REGISTRY_URL}/${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}" "docker://${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}"; log_info "Promoted to Harbor: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}"; };
              download_and_push_tarball() { log_info "Downloading/pushing tar from $IMAGE_TAR_URL."; ensure_env_vars_set IMAGE_TAR_URL HARBOR_REGISTRY HARBOR_PROJECT HARBOR_IMAGE_NAME HARBOR_IMAGE_TAG HARBOR_USERNAME HARBOR_PASSWORD; if ! curl -L -o /tmp/image.tar "$IMAGE_TAR_URL"; then log_error "Failed download tar $IMAGE_TAR_URL."; exit 1; fi; skopeo copy --dest-tls-verify=false --dest-creds="${HARBOR_USERNAME}:${HARBOR_PASSWORD}" "docker-archive:/tmp/image.tar" "docker://${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}"; log_info "Tar pushed to Harbor: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${HARBOR_IMAGE_NAME}:${HARBOR_IMAGE_TAG}"; };
              if [ ! -f "$ACTION_TYPE_FILE" ]; then log_error "$ACTION_TYPE_FILE not found."; exit 1; fi; ACTION=$(cat "$ACTION_TYPE_FILE"); log_info "Action: $ACTION";
              case "$ACTION" in
                "build") log_info "Exec 'build' path..."; download_and_extract_build_context; run_kaniko_build; promote_to_harbor; log_info "'Build' path done.";;
                "push_tar") log_info "Exec 'push_tar' path..."; download_and_push_tarball; log_info "'Push Tar' path done.";;
                *) log_error "Unknown action: $ACTION"; exit 1;;
              esac; exit 0
